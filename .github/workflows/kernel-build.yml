# .github/workflows/kernel-build.yml
#
# Phase-1  → cross-arch HWE 6.11 kernel build & packaging
# Phase-2  → perf-tuned .config + basic hackbench regression gate
#
# Runs on every push & PR, producing signed .deb artefacts,
# cleaning up to avoid disk exhaustion, and a JSON hackbench result.

name: "CI: Kernel Build & Bench"

on:
  push:
  pull_request:

concurrency:
  group: "kernel-${{ github.ref }}-${{ github.sha }}"
  cancel-in-progress: false

env:
  DEBIAN_FRONTEND: noninteractive
  ASIOS_CLEANUP: "0"
  USE_DISTRO_CONFIG: "1"
  COSIGN_VERSION: "v2.0.0"
  KVER: "6.11"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, aarch64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Apt — install build deps
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            build-essential bc flex bison libssl-dev libelf-dev dwarves \
            liblz4-dev libzstd-dev libbz2-dev liblzma-dev \
            crossbuild-essential-arm64 crossbuild-essential-amd64 \
            qemu-user-static debhelper-compat fakeroot

      - name: Install cosign
        run: |
          ARCH=$(uname -m)
          if [[ "$ARCH" == "x86_64" ]]; then
            BINARY="cosign-linux-amd64"
          else
            BINARY="cosign-linux-arm64"
          fi
          curl -sSL -o cosign \
            https://github.com/sigstore/cosign/releases/download/${COSIGN_VERSION}/${BINARY}
          chmod +x cosign
          sudo mv cosign /usr/local/bin/

      - name: Cache kernel objects (${ { matrix.arch }})
        uses: actions/cache@v4
        with:
          path: scripts/common/${{ matrix.arch }}_build
          key: ${{ runner.os }}-kbuild-${{ matrix.arch }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-kbuild-${{ matrix.arch }}-

      - name: Inject signing key
        run: |
          mkdir -p scripts/common/certs
          echo "${{ secrets.ASIOS_SIGNING_KEY }}" \
            > scripts/common/certs/asios-signing.pem
          chmod 600 scripts/common/certs/asios-signing.pem

      - name: Build ASIOS kernel (both arches)
        run: scripts/common/build-asios-kernel.sh

      - name: Prepare packaging tree
        run: |
          mkdir -p scripts/${{ matrix.arch }}/${{ matrix.arch }}_build
          cp -r scripts/common/${{ matrix.arch }}_build/kernel-build-${{ env.KVER }} \
                scripts/${{ matrix.arch }}/${{ matrix.arch }}_build/

      - name: Package kernel (.deb)
        run: |
          if [[ "${{ matrix.arch }}" == "x86_64" ]]; then
            scripts/x86_64/build-deb.sh
          else
            scripts/arm64/build-deb.sh
          fi

      - name: Clean up build trees & apt cache
        run: |
          rm -rf scripts/common/x86_64_build scripts/common/arm64_build
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*

      - name: Sign artefacts & emit SBOM
        run: |
          cosign attest \
            --predicate <(echo "{\"builder\":\"gh-actions\",\"arch\":\"${{ matrix.arch }}\"}") \
            --key scripts/common/certs/asios-signing.pem \
            output-debs/*.deb

      - name: Upload kernel .deb packages
        uses: actions/upload-artifact@v4
        with:
          name: asios-debs-${{ matrix.arch }}
          path: output-debs/*.deb
          retention-days: 7

  bench:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, aarch64]

    steps:
      - name: Download ASIOS .deb packages
        uses: actions/download-artifact@v4
        with:
          name: asios-debs-${{ matrix.arch }}
          path: asios-debs/

      - name: Enable universe & install hackbench
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository universe -y
          sudo apt-get update -qq
          sudo apt-get install -y hackbench jq

      - name: Install ASIOS kernel (dpkg)
        run: |
          sudo dpkg -i asios-debs/*.deb || true
          sudo update-initramfs -c -k $(ls /lib/modules | tail -1)

      - name: Run hackbench micro-benchmark
        run: |
          hackbench -g 8 -l 10000 --threads | tee hackbench.txt
          awk '/^\s*Time:/ {print "{\"arch\":\"${{ matrix.arch }}\",\"sec\":"$2"}"}' hackbench.txt \
            > result.json

      - name: Upload hackbench result
        uses: actions/upload-artifact@v4
        with:
          name: hackbench-${{ matrix.arch }}
          path: result.json
